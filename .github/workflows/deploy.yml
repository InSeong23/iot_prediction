name: Deploy JVM Predictor

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'jvm-predictor/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'jvm-predictor/**'

env:
  PROJECT_PATH: jvm-predictor
  DOCKER_IMAGE: jvm-predictor
  DOCKER_REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        cd ${{ env.PROJECT_PATH }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        cd ${{ env.PROJECT_PATH }}
        python -m pytest tests/ -v --cov=./ --cov-report=xml
      continue-on-error: true
    
    - name: Check code health
      run: |
        cd ${{ env.PROJECT_PATH }}
        python main.py --mode health-check --dry-run

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./${{ env.PROJECT_PATH }}
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd ${{ secrets.DEPLOY_PATH }}
          git pull origin main
          
          # 환경변수 파일 업데이트
          cat > jvm-predictor/.env << EOF
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          INFLUXDB_URL=${{ secrets.INFLUXDB_URL }}
          INFLUXDB_TOKEN=${{ secrets.INFLUXDB_TOKEN }}
          INFLUXDB_ORG=${{ secrets.INFLUXDB_ORG }}
          INFLUXDB_BUCKET=${{ secrets.INFLUXDB_BUCKET }}
          EOF
          
          # 서비스 재시작
          docker-compose pull jvm-predictor
          docker-compose up -d jvm-predictor
          
          # 헬스체크
          sleep 30
          docker-compose ps jvm-predictor
          docker-compose logs --tail=50 jvm-predictor

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          JVM Predictor 배포 상태: ${{ job.status }}
          커밋: ${{ github.sha }}
          브랜치: ${{ github.ref }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()